%% Noise analysis
% Author: O.G. Steele
% Date: 10.12.20
% Description:
%   Simple script to extract the SD of the noise from the summary .txt
%   produced after a simple pearsons analysis of a whole recording split
%   into epochs as defined by test pulse interval

% Noise:
% .filepath = filepaths of the summary.txt files used
% .max_noise_val = maximum noise level
% .max_noise_ind = maximum noise index
% .noise_levels = table of all noise levels by wave
% .summary = summary.txt from the noisiest recording
% .wave_path = all the wave paths
% .mean_noise = trimmed mean 33% noise level

%% Load in Data
% Use ephysIO.mat to load in the extracted ensembles from Eventer

clear 
close all

% Select compound events first
title_str = "1. Select the first summary .txt file";
if ~ispc; menu(title_str,'OK'); end
clear('title_str')
[file,path,~] = uigetfile('*.txt');

% Display file selection selection
if isequal(file,0)
   disp('User selected Cancel')
   
   % If user selects cancel here, script will end here.
   return
   
else
    % display the full path of the initial file selected
    disp(['User selected ', fullfile(path, file)])
    
    % change directory to the eventer.output folder
    cd(path)
    cd('..')
    
    % generate directory listing
    d=dir;
    d=d(~ismember({d.name},{'.','..'}));
    dirFlags = [d.isdir];
    d = d(dirFlags);
    waves = d(2:end);
    
    % generate a list of file paths and extract the data
    wave = zeros(size(waves,1),1);
    noise = zeros(size(waves,1),1);
    thresh = zeros(size(waves,1),1);
    for i = 1:size(waves,1)
        wave_path(i,1) = string(fullfile(waves(i).folder,waves(i).name));
        file_path(i,1) = fullfile(wave_path(i),'summary.txt');
        [wave(i),noise(i),thresh(i),~] = pullnoise(file_path(i));
    end
    
    % outputs
    [val,ind] = max(noise);
    Wave_Number = wave(ind);
    Noise_Level = val;
    noise_levels = table(wave,noise);
    [~,~,~,summary] = pullnoise(file_path(ind));
    figure
    plot(wave,noise)
    title('Wave by noise')
    ylabel('Standard deviation of the noise of the deconvoluted wave (a.u.)')
    xlabel('Wave number')
    box off
    set(gca,'linewidth',2)
    set(gcf,'color','w')
    hold on
    plot(wave,movmean(noise,7))
    legend('Noise','Average','linewidth',1)
    
end

% create output
noise_output.filepath = file_path;
noise_output.max_noise_val = Noise_Level;
noise_output.max_noise_ind = Wave_Number;
noise_output.noise_levels = noise_levels;
noise_output.summary = summary;
noise_output.wave_path = wave_path;
noise_output.mean_noise = trimmean(noise_levels.noise,33,'floor');       

% tidy up
clear file path d waves wave noise thresh ans dirFlags i ind val Wave_Number 
clear file_path Noise_Level noise_levels summary wave_path

% cd back to same dir as raw recordings
cd ..

% Select recording summary came from
title_str = "2. Select the recording summary.txt came from";
if ~ispc; menu(title_str,'OK'); end
[file,~,~] = uigetfile('*.*');
clear title_str ans

% save as name of file in dir
a = split(file,'.');
file = append(char(a(1)),'_noise.mat');
save(file,'noise_output')

% save figure
a = split(file,'.');
file = append(char(a(1)),'.pdf');
saveas(gcf,file)
%% Define Functions

function [wave_num, sd_noise, sd_thresh, summary] = pullnoise(filepath)
% simple function to pull the wave number, noise level and adjusted
% threshold from the summary.txt files generated by Eventer

% Output Arguments
%   wave_num: wave number to associate noise level with
%   sd_noise: sd of the noise (a.u.)
%   sd_thresh: scaled threshold sd

% Input Arguments:
%   filepath: character string of the fullfile where the summary.txt is
%             located

% ------------------------------------------------------------------- % 
    % Setup the Import Options
    opts = delimitedTextImportOptions("NumVariables", 2);

    % Specify range and delimiter
    opts.DataLines = [2, Inf];
    opts.Delimiter = ":";

    % Specify column names and types
    opts.VariableNames = ["Variable", "Data"];
    opts.VariableTypes = ["string", "double"];
    opts = setvaropts(opts, 1, "WhitespaceRule", "preserve");
    opts = setvaropts(opts, 1, "EmptyFieldRule", "auto");
    opts.ExtraColumnsRule = "ignore";
    opts.EmptyLineRule = "read";

    % Import the data
    summary = readtable(filepath, opts);
    summary = table(summary.Data,'RowNames',summary.Variable);
    
    % Extract the variables of interest
    wave_num = table2array(summary({'Wave number'},:)); % wave number to associate noise level with
    sd_noise = table2array(summary({'Standard deviation of the noise of the deconvoluted wave (a.u.)'},:)); % scaled threshold sd
    sd_thresh = table2array(summary({'Scale factor of noise standard deviations for threshold setting'},:)); % scaled threshold sd
    %wave_num = summary.Data(2); % wave number to associate noise level with
    %sd_noise = summary.Data(11); % sd of the noise (a.u.)
    %sd_thresh = summary.Data(12); % scaled threshold sd
    
end